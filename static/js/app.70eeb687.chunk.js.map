{"version":3,"sources":["utils/_DATA.js","utils/api.js","utils/colors.js","components/Deck.js","components/DeckList.js","actions/index.js","components/TouchButton.js","components/AddDeck.js","components/TextButton.js","components/DeckDetail.js","components/AddCard.js","components/Quiz_Android.js","components/Quiz_iOS.js","utils/helpers.js","components/Quiz.js","components/Settings.js","navigation/MainTabNavigator.js","navigation/AppNavigator.js","App.js","reducers/index.js","web-build/register-service-worker.js"],"names":["decks","React","title","questions","question","answer","JavaScript","Redux","DECKS_STORAGE_KEY","getDeck","id","a","async","AsyncStorage","getItem","storeResults","JSON","parse","console","log","saveDeckTitleAS","mergeItem","stringify","removeDeckAS","key","results","data","undefined","setItem","addCardToDeckAS","card","deck","concat","resetDecks","gray","white","red","green","Deck","props","View","style","styles","deckContainer","Text","deckText","cardText","length","propTypes","PropTypes","object","StyleSheet","create","alignItems","justifyContent","flexBasis","minHeight","borderWidth","borderColor","backgroundColor","borderRadius","marginBottom","fontSize","color","connect","state","DeckList","this","handleInitialData","navigation","ScrollView","container","Object","values","map","TouchableOpacity","onPress","navigate","Component","isRequired","func","flex","paddingTop","paddingLeft","paddingRight","paddingBottom","textAlign","dispatch","getDecks","then","type","receiveDecks","TouchButton","children","btnStyle","txtStyle","disabled","disabledButton","btnDisabled","disabledButtonText","btnTextDisabled","btnContainer","btn","btnText","width","height","fontWeight","string","bool","AddDeck","text","handleChange","setState","handleSubmit","addDeck","resetAction","StackActions","reset","index","actions","NavigationActions","routeName","params","block","TextInput","input","value","onChangeText","placeholder","autoFocus","returnKeyType","onSubmitEditing","TextButton","DeckDetail","handleDelete","removeDeck","goBack","nextProps","getParam","AddCard","handleQuestionChange","handleAnswerChange","addCardToDeck","answerTextInput","focus","blurOnSubmit","ref","deckId","screen","Quiz_Android","show","correct","incorrect","questionCount","answered","Array","fill","handlePageChange","evt","handleAnswer","response","page","prevState","val","idx","viewPager","setPage","handleReset","pageStyle","count","percent","toFixed","resultStyle","resultTextGood","resultTextBad","ViewPagerAndroid","scrollEnabled","onPageSelected","questionContainer","questionText","questionWrapper","flexGrow","textDecorationLine","withNavigation","SCREEN_WIDTH","Dimensions","get","Quiz_iOS","handleScroll","scrollView","scrollTo","x","pagingEnabled","horizontal","onMomentumScrollBegin","setLocalNotification","Permissions","status","Notifications","createChannelAndroidAsync","name","description","sound","priority","cancelAllScheduledNotificationsAsync","tomorrow","Date","setDate","getDate","setHours","setMinutes","scheduleLocalNotificationAsync","body","ios","android","channelId","sticky","time","repeat","catch","err","Quiz","removeItem","Constants","platform","navigationOptions","Settings","handleResetDecks","resetStore","blockContainer","blockText","isIOS","Platform","OS","routeConfigs","Decks","tabBarLabel","tabBarIcon","tintColor","size","tabNavigatorConfig","header","defaultNavigationOptions","bounces","tabBarOptions","activeTintColor","shadowColor","shadowOffset","shadowRadius","shadowOpacity","borderTopWidth","borderTopColor","labelStyle","tabStyle","marginTop","showIcon","Tabs","createBottomTabNavigator","MainNavigator","createStackNavigator","Home","headerTintColor","headerStyle","headerTitleStyle","headerLayoutPreset","createAppContainer","MainTabNavigator","store","createStore","action","remainingDecks","INITIAL_STATE","applyMiddleware","thunk","logger","FlashcardStatusBar","statusBarHeight","StatusBar","translucent","App","barStyle","AppNavigator","navigator","window","addEventListener","serviceWorker","register","scope","info","error"],"mappings":"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","file":"static/js/app.70eeb687.chunk.js","sourcesContent":["export const decks = {\r\n  React: {\r\n    title: 'React',\r\n    questions: [\r\n      {\r\n        question: 'What is React?',\r\n        answer: 'A library for managing user interfaces'\r\n      },\r\n      {\r\n        question: 'Where do you make Ajax requests in React?',\r\n        answer: 'The componentDidMount lifecycle event'\r\n      }\r\n    ]\r\n  },\r\n  JavaScript: {\r\n    title: 'JavaScript',\r\n    questions: [\r\n      {\r\n        question: 'What is a closure?',\r\n        answer:\r\n          'The combination of a function and the lexical environment within which that function was declared.'\r\n      }\r\n    ]\r\n  },\r\n  Redux: {\r\n    title: 'Redux',\r\n    questions: [\r\n      {\r\n        question: 'What is Redux?',\r\n        answer: 'A predictable state container for JavaScript Apps'\r\n      },\r\n      {\r\n        question: 'What is an action creator?',\r\n        answer:\r\n          'It is a function that takes an input and returns an object with a type and data property.'\r\n      },\r\n      {\r\n        question: 'What is a reducer?',\r\n        answer:\r\n          'A reducer is a pure function that takes the current state and action and returns the next state.'\r\n      }\r\n    ]\r\n  }\r\n};\r\n","import { AsyncStorage } from 'react-native';\r\nimport { decks } from './_DATA';\r\n\r\nconst DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\r\n\r\nexport function getData() {\r\n  return decks;\r\n}\r\n\r\nfunction formatDeckResults(results) {\r\n  return results === null ? decks : JSON.parse(results);\r\n}\r\n\r\nexport function getDecksOld() {\r\n  return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(formatDeckResults);\r\n  // return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(result => {\r\n  //   console.log('raw result', result);\r\n  //   console.log('parse result', JSON.parse(result));\r\n  //   return formatDeckResults(result);\r\n  // });\r\n}\r\n\r\nexport async function getDecks() {\r\n  try {\r\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\r\n\r\n    if (storeResults === null) {\r\n      AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\r\n    }\r\n\r\n    return storeResults === null ? decks : JSON.parse(storeResults);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function getDeck(id) {\r\n  try {\r\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\r\n\r\n    return JSON.parse(storeResults)[id];\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function saveDeckTitleAS(title) {\r\n  try {\r\n    await AsyncStorage.mergeItem(\r\n      DECKS_STORAGE_KEY,\r\n      JSON.stringify({\r\n        [title]: {\r\n          title,\r\n          questions: []\r\n        }\r\n      })\r\n    );\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function removeDeckAS(key) {\r\n  try {\r\n    const results = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\r\n    const data = JSON.parse(results);\r\n    data[key] = undefined;\r\n    delete data[key];\r\n    AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function addCardToDeckAS(title, card) {\r\n  try {\r\n    const deck = await getDeck(title);\r\n\r\n    await AsyncStorage.mergeItem(\r\n      DECKS_STORAGE_KEY,\r\n      JSON.stringify({\r\n        [title]: {\r\n          questions: [...deck.questions].concat(card)\r\n        }\r\n      })\r\n    );\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function resetDecks() {\r\n  try {\r\n    await AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n","export const gray = '#dfdfdf';\r\nexport const darkGray = '#aaa';\r\nexport const textGray = '#666';\r\nexport const white = '#fff';\r\nexport const red = '#c30000';\r\nexport const green = 'darkgreen';\r\nexport const lightGreen = '#cdeccd';\r\nexport const orange = '#f26f28';\r\nexport const blue = '#4e4cb8';\r\nexport const pink = '#b93fb3';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { white, textGray } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Deck = props => {\r\n  const { deck } = props;\r\n\r\n  if (deck === undefined) {\r\n    return <View style={styles.deckContainer} />;\r\n  }\r\n  return (\r\n    <View style={styles.deckContainer}>\r\n      <View>\r\n        <Text style={styles.deckText}>{deck.title}</Text>\r\n      </View>\r\n      <View>\r\n        <Text style={styles.cardText}>{deck.questions.length} cards</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\nDeck.propTypes = {\r\n  deck: PropTypes.object\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  deckContainer: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexBasis: 120,\r\n    minHeight: 120,\r\n    borderWidth: 1,\r\n    borderColor: '#aaa',\r\n    backgroundColor: white,\r\n    borderRadius: 5,\r\n    marginBottom: 10\r\n  },\r\n  deckText: {\r\n    fontSize: 28\r\n  },\r\n  cardText: {\r\n    fontSize: 18,\r\n    color: textGray\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { id }) => {\r\n  const deck = state[id];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Deck);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  ScrollView,\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport { connect } from 'react-redux';\r\nimport Deck from './Deck';\r\nimport { gray, green } from '../utils/colors';\r\nimport { handleInitialData } from '../actions/index';\r\n\r\nexport class DeckList extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    handleInitialData: PropTypes.func.isRequired,\r\n    decks: PropTypes.object.isRequired\r\n  };\r\n  componentDidMount() {\r\n    this.props.handleInitialData();\r\n  }\r\n  render() {\r\n    const { decks, navigation } = this.props;\r\n\r\n    return (\r\n      <ScrollView style={styles.container}>\r\n        <Text style={styles.title}>Mobile Flashcards</Text>\r\n        {Object.values(decks).map(deck => {\r\n          return (\r\n            <TouchableOpacity\r\n              key={deck.title}\r\n              onPress={() =>\r\n                navigation.navigate('DeckDetail', { title: deck.title })\r\n              }\r\n            >\r\n              <Deck id={deck.title} />\r\n            </TouchableOpacity>\r\n          );\r\n        })}\r\n        <View style={{ marginBottom: 30 }} />\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray\r\n  },\r\n  title: {\r\n    fontSize: 40,\r\n    textAlign: 'center',\r\n    marginBottom: 16,\r\n    color: green\r\n  }\r\n});\r\n\r\nconst mapStateToProps = state => ({ decks: state });\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { handleInitialData }\r\n)(DeckList);\r\n","import { getDecks } from '../utils/api';\r\n\r\nexport const RECEIVE_DECKS = 'RECEIVE_DECKS';\r\nexport const ADD_DECK = 'ADD_DECK';\r\nexport const REMOVE_DECK = 'REMOVE_DECK';\r\nexport const ADD_CARD = 'ADD_CARD';\r\nexport const RESET_STORE = 'RESET_STORE';\r\n\r\nexport function receiveDecks(decks) {\r\n  return {\r\n    type: RECEIVE_DECKS,\r\n    decks\r\n  };\r\n}\r\n\r\nexport function addDeck(title) {\r\n  return {\r\n    type: ADD_DECK,\r\n    title\r\n  };\r\n}\r\n\r\nexport function removeDeck(id) {\r\n  return {\r\n    type: REMOVE_DECK,\r\n    id\r\n  };\r\n}\r\n\r\nexport function addCardToDeck(deckId, card) {\r\n  return {\r\n    type: ADD_CARD,\r\n    deckId,\r\n    card\r\n  };\r\n}\r\n\r\nexport function resetStore() {\r\n  return {\r\n    type: RESET_STORE\r\n  };\r\n}\r\nexport function handleInitialData() {\r\n  return dispatch => {\r\n    return getDecks().then(decks => {\r\n      dispatch(receiveDecks(decks));\r\n    });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { textGray, white, darkGray, gray } from '../utils/colors';\r\n\r\nexport default function TouchButton({\r\n  children,\r\n  onPress,\r\n  btnStyle = {},\r\n  txtStyle = {},\r\n  disabled = false\r\n}) {\r\n  const disabledButton = disabled ? styles.btnDisabled : {};\r\n  const disabledButtonText = disabled ? styles.btnTextDisabled : {};\r\n  return (\r\n    <View style={styles.btnContainer}>\r\n      <TouchableOpacity\r\n        // style={[styles.btn, btnStyle, disabled ? styles.btnDisabled : null]}\r\n        style={[styles.btn, btnStyle, disabledButton]}\r\n        onPress={onPress}\r\n        disabled={disabled}\r\n      >\r\n        <Text\r\n          style={[\r\n            styles.btnText,\r\n            txtStyle,\r\n            // disabled ? styles.btnTextDisabled : {}\r\n            disabledButtonText\r\n          ]}\r\n        >\r\n          {children}\r\n        </Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  btnContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 20\r\n  },\r\n  btn: {\r\n    width: 200,\r\n    height: 50,\r\n    backgroundColor: 'red',\r\n    borderRadius: 5,\r\n    justifyContent: `center`,\r\n    alignItems: `center`,\r\n    borderWidth: 1,\r\n    borderColor: '#999'\r\n  },\r\n  btnDisabled: {\r\n    backgroundColor: gray,\r\n    borderColor: darkGray\r\n  },\r\n  btnText: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    color: white\r\n  },\r\n  btnTextDisabled: {\r\n    color: darkGray\r\n  }\r\n});\r\n\r\nTouchButton.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  onPress: PropTypes.func.isRequired,\r\n  btnStyle: PropTypes.object,\r\n  txtStyle: PropTypes.object,\r\n  disabled: PropTypes.bool\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, StyleSheet, TextInput } from 'react-native';\r\nimport TouchButton from './TouchButton';\r\nimport { gray, green, white, textGray } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { addDeck } from '../actions/index';\r\nimport { saveDeckTitleAS } from '../utils/api';\r\nimport { StackActions, NavigationActions } from 'react-navigation';\r\n\r\nexport class AddDeck extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    addDeck: PropTypes.func.isRequired\r\n  };\r\n  state = {\r\n    text: ''\r\n  };\r\n  handleChange = text => {\r\n    this.setState({ text });\r\n  };\r\n  handleSubmit = () => {\r\n    const { addDeck, navigation } = this.props;\r\n    const { text } = this.state;\r\n\r\n    addDeck(text);\r\n    saveDeckTitleAS(text);\r\n\r\n    const resetAction = StackActions.reset({\r\n      index: 1,\r\n      actions: [\r\n        NavigationActions.navigate({ routeName: 'Home' }),\r\n        NavigationActions.navigate({\r\n          routeName: 'DeckDetail',\r\n          params: { title: text }\r\n        })\r\n      ]\r\n    });\r\n    navigation.dispatch(resetAction);\r\n\r\n    this.setState(() => ({ text: '' }));\r\n  };\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={{ height: 60 }} />\r\n        <View style={styles.block}>\r\n          <Text style={styles.title}>What is the title of your new deck?</Text>\r\n        </View>\r\n        <View style={[styles.block]}>\r\n          <TextInput\r\n            style={styles.input}\r\n            value={this.state.text}\r\n            onChangeText={this.handleChange}\r\n            placeholder=\"Deck Name\"\r\n            autoFocus={true}\r\n            returnKeyType=\"done\"\r\n            onSubmitEditing={this.handleSubmit}\r\n          />\r\n        </View>\r\n        <TouchButton\r\n          btnStyle={{ backgroundColor: green, borderColor: white }}\r\n          onPress={this.handleSubmit}\r\n          disabled={this.state.text === ''}\r\n        >\r\n          Create Deck\r\n        </TouchButton>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    fontSize: 32\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: textGray,\r\n    backgroundColor: white,\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    borderRadius: 5,\r\n    fontSize: 20,\r\n    height: 40,\r\n    marginBottom: 20\r\n  }\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  { addDeck }\r\n)(AddDeck);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\nexport default function TextButton({ children, onPress, txtStyle = {} }) {\r\n  return (\r\n    <View style={styles.btnContainer}>\r\n      <TouchableOpacity onPress={onPress}>\r\n        <Text style={[styles.btnText, txtStyle]}>{children}</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  btnContainer: {\r\n    // flex: 1,\r\n    // justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n    // borderWidth: 1,\r\n    // borderColor: 'blue',\r\n    marginBottom: 20\r\n  },\r\n  btnText: {\r\n    fontSize: 20\r\n  }\r\n});\r\n\r\nTextButton.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  onPress: PropTypes.func.isRequired,\r\n  txtStyle: PropTypes.object\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport Deck from './Deck';\r\nimport TouchButton from './TouchButton';\r\nimport TextButton from './TextButton';\r\nimport { gray, textGray, green, white, red } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { removeDeck } from '../actions/index';\r\nimport { removeDeckAS } from '../utils/api';\r\nimport { NavigationActions } from 'react-navigation';\r\n\r\nexport class DeckDetail extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    removeDeck: PropTypes.func.isRequired,\r\n    deck: PropTypes.object\r\n  };\r\n  shouldComponentUpdate(nextProps) {\r\n    return nextProps.deck !== undefined;\r\n  }\r\n  handleDelete = id => {\r\n    const { removeDeck, navigation } = this.props;\r\n\r\n    removeDeck(id);\r\n    removeDeckAS(id);\r\n\r\n    navigation.goBack();\r\n  };\r\n  render() {\r\n    const { deck } = this.props;\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Deck id={deck.title} />\r\n        <View>\r\n          <TouchButton\r\n            btnStyle={{ backgroundColor: white, borderColor: textGray }}\r\n            txtStyle={{ color: textGray }}\r\n            onPress={() =>\r\n              this.props.navigation.navigate('AddCard', { title: deck.title })\r\n            }\r\n          >\r\n            Add Card\r\n          </TouchButton>\r\n          <TouchButton\r\n            btnStyle={{ backgroundColor: green, borderColor: white }}\r\n            txtStyle={{ color: white }}\r\n            onPress={() =>\r\n              this.props.navigation.navigate('Quiz', { title: deck.title })\r\n            }\r\n          >\r\n            Start Quiz\r\n          </TouchButton>\r\n        </View>\r\n        <TextButton\r\n          txtStyle={{ color: red }}\r\n          onPress={() => this.handleDelete(deck.title)}\r\n        >\r\n          Delete Deck\r\n        </TextButton>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'space-around',\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { navigation }) => {\r\n  const title = navigation.getParam('title', 'undefined');\r\n  const deck = state[title];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { removeDeck }\r\n)(DeckDetail);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, TextInput, StyleSheet } from 'react-native';\r\nimport TouchButton from './TouchButton';\r\nimport { gray, green } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { addCardToDeck } from '../actions/index';\r\nimport { addCardToDeckAS } from '../utils/api';\r\n\r\nexport class AddCard extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    addCardToDeck: PropTypes.func.isRequired\r\n  };\r\n  state = {\r\n    question: '',\r\n    answer: ''\r\n  };\r\n  handleQuestionChange = question => {\r\n    this.setState({ question });\r\n  };\r\n  handleAnswerChange = answer => {\r\n    this.setState({ answer });\r\n  };\r\n  handleSubmit = () => {\r\n    const { addCardToDeck, title, navigation } = this.props;\r\n    const card = {\r\n      question: this.state.question,\r\n      answer: this.state.answer\r\n    };\r\n\r\n    addCardToDeck(title, card);\r\n    addCardToDeckAS(title, card);\r\n\r\n    this.setState({ question: '', answer: '' });\r\n    navigation.goBack();\r\n  };\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View>\r\n          <View style={styles.block}>\r\n            <Text style={styles.title}>Add a question</Text>\r\n          </View>\r\n          <View style={[styles.block]}>\r\n            <TextInput\r\n              style={styles.input}\r\n              value={this.state.question}\r\n              onChangeText={this.handleQuestionChange}\r\n              placeholder=\"Question\"\r\n              autoFocus={true}\r\n              returnKeyType=\"next\"\r\n              onSubmitEditing={() => this.answerTextInput.focus()}\r\n              blurOnSubmit={false}\r\n            />\r\n          </View>\r\n          <View style={[styles.block]}>\r\n            <TextInput\r\n              style={styles.input}\r\n              value={this.state.answer}\r\n              onChangeText={this.handleAnswerChange}\r\n              placeholder=\"Answer\"\r\n              ref={input => {\r\n                this.answerTextInput = input;\r\n              }}\r\n              returnKeyType=\"done\"\r\n              onSubmitEditing={this.handleSubmit}\r\n            />\r\n          </View>\r\n          <TouchButton\r\n            btnStyle={{ backgroundColor: green, borderColor: '#fff' }}\r\n            onPress={this.handleSubmit}\r\n            disabled={this.state.question === '' || this.state.answer === ''}\r\n          >\r\n            Submit\r\n          </TouchButton>\r\n        </View>\r\n        <View style={{ height: '30%' }} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray,\r\n    justifyContent: 'space-around'\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    fontSize: 32\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: 'gray',\r\n    backgroundColor: '#fff',\r\n    paddingLeft: 10,\r\n    paddingRight: 10,\r\n    borderRadius: 5,\r\n    fontSize: 20,\r\n    height: 40\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { navigation }) => {\r\n  const title = navigation.getParam('title', 'undefined');\r\n\r\n  return {\r\n    title\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addCardToDeck }\r\n)(AddCard);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text, StyleSheet, ViewPagerAndroid } from 'react-native';\r\nimport TextButton from './TextButton';\r\nimport TouchButton from './TouchButton';\r\nimport { gray, green, red, textGray, darkGray, white } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { withNavigation } from 'react-navigation';\r\n\r\nconst screen = {\r\n  QUESTION: 'question',\r\n  ANSWER: 'answer',\r\n  RESULT: 'result'\r\n};\r\nconst answer = {\r\n  CORRECT: 'correct',\r\n  INCORRECT: 'incorrect'\r\n};\r\n\r\nexport class Quiz_Android extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    deck: PropTypes.object.isRequired\r\n  };\r\n  state = {\r\n    show: screen.QUESTION,\r\n    correct: 0,\r\n    incorrect: 0,\r\n    questionCount: this.props.deck.questions.length,\r\n    answered: Array(this.props.deck.questions.length).fill(0)\r\n  };\r\n  handlePageChange = evt => {\r\n    // console.log('evt.nativeEvent.position', evt.nativeEvent.position);\r\n    this.setState({\r\n      show: screen.QUESTION\r\n    });\r\n  };\r\n  handleAnswer = (response, page) => {\r\n    if (response === answer.CORRECT) {\r\n      this.setState(prevState => ({ correct: prevState.correct + 1 }));\r\n    } else {\r\n      this.setState(prevState => ({ incorrect: prevState.incorrect + 1 }));\r\n    }\r\n    this.setState(\r\n      prevState => ({\r\n        answered: prevState.answered.map((val, idx) => (page === idx ? 1 : val))\r\n      }),\r\n      () => {\r\n        // console.log('this.state.answered', this.state.answered);\r\n        const { correct, incorrect, questionCount } = this.state;\r\n\r\n        if (questionCount === correct + incorrect) {\r\n          this.setState({ show: screen.RESULT });\r\n        } else {\r\n          // console.log('this.state.page', this.state.page);\r\n          this.viewPager.setPage(page + 1);\r\n          this.setState(prevState => ({\r\n            show: screen.QUESTION\r\n          }));\r\n        }\r\n      }\r\n    );\r\n  };\r\n  handleReset = () => {\r\n    this.setState(prevState => ({\r\n      show: screen.QUESTION,\r\n      correct: 0,\r\n      incorrect: 0,\r\n      answered: Array(prevState.questionCount).fill(0)\r\n    }));\r\n  };\r\n  render() {\r\n    const { questions } = this.props.deck;\r\n    const { show } = this.state;\r\n\r\n    if (questions.length === 0) {\r\n      return (\r\n        <View style={styles.pageStyle}>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              You cannot take a quiz because there are no cards in the deck.\r\n            </Text>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Please add some cards and try again.\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    if (this.state.show === screen.RESULT) {\r\n      const { correct, questionCount } = this.state;\r\n      const percent = ((correct / questionCount) * 100).toFixed(0);\r\n      const resultStyle =\r\n        percent >= 70 ? styles.resultTextGood : styles.resultTextBad;\r\n\r\n      return (\r\n        <View style={styles.pageStyle}>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Quiz Complete!\r\n            </Text>\r\n            <Text style={resultStyle}>\r\n              {correct} / {questionCount} correct\r\n            </Text>\r\n          </View>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Percentage correct\r\n            </Text>\r\n            <Text style={resultStyle}>{percent}%</Text>\r\n          </View>\r\n          <View>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: green, borderColor: white }}\r\n              onPress={this.handleReset}\r\n            >\r\n              Restart Quiz\r\n            </TouchButton>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\r\n              txtStyle={{ color: textGray }}\r\n              onPress={() => {\r\n                this.handleReset();\r\n                this.props.navigation.goBack();\r\n              }}\r\n            >\r\n              Back To Deck\r\n            </TouchButton>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\r\n              txtStyle={{ color: textGray }}\r\n              onPress={() => {\r\n                this.handleReset();\r\n                this.props.navigation.navigate('Home');\r\n              }}\r\n            >\r\n              Home\r\n            </TouchButton>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewPagerAndroid\r\n        style={styles.container}\r\n        scrollEnabled={true}\r\n        onPageSelected={this.handlePageChange}\r\n        ref={viewPager => {\r\n          this.viewPager = viewPager;\r\n        }}\r\n      >\r\n        {questions.map((question, idx) => (\r\n          <View style={styles.pageStyle} key={idx}>\r\n            <View style={styles.block}>\r\n              <Text style={styles.count}>\r\n                {idx + 1} / {questions.length}\r\n              </Text>\r\n            </View>\r\n            <View style={[styles.block, styles.questionContainer]}>\r\n              <Text style={styles.questionText}>\r\n                {show === screen.QUESTION ? 'Question' : 'Answer'}\r\n              </Text>\r\n              <View style={styles.questionWrapper}>\r\n                <Text style={styles.title}>\r\n                  {show === screen.QUESTION\r\n                    ? question.question\r\n                    : question.answer}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            {show === screen.QUESTION ? (\r\n              <TextButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: screen.ANSWER })}\r\n              >\r\n                Show Answer\r\n              </TextButton>\r\n            ) : (\r\n              <TextButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: screen.QUESTION })}\r\n              >\r\n                Show Question\r\n              </TextButton>\r\n            )}\r\n            <View>\r\n              <TouchButton\r\n                btnStyle={{ backgroundColor: green, borderColor: white }}\r\n                onPress={() => this.handleAnswer(answer.CORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}\r\n              >\r\n                Correct\r\n              </TouchButton>\r\n              <TouchButton\r\n                btnStyle={{ backgroundColor: red, borderColor: white }}\r\n                onPress={() => this.handleAnswer(answer.INCORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}\r\n              >\r\n                Incorrect\r\n              </TouchButton>\r\n            </View>\r\n          </View>\r\n        ))}\r\n      </ViewPagerAndroid>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  pageStyle: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray,\r\n    justifyContent: 'space-around'\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n  count: {\r\n    fontSize: 24\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    textAlign: 'center'\r\n  },\r\n  questionContainer: {\r\n    borderWidth: 1,\r\n    borderColor: darkGray,\r\n    backgroundColor: white,\r\n    borderRadius: 5,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    flexGrow: 1\r\n  },\r\n  questionWrapper: {\r\n    flex: 1,\r\n    justifyContent: 'center'\r\n  },\r\n  questionText: {\r\n    textDecorationLine: 'underline',\r\n    textAlign: 'center',\r\n    fontSize: 20\r\n  },\r\n  resultTextGood: {\r\n    color: green,\r\n    fontSize: 46,\r\n    textAlign: 'center'\r\n  },\r\n  resultTextBad: {\r\n    color: red,\r\n    fontSize: 46,\r\n    textAlign: 'center'\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { title }) => {\r\n  const deck = state[title];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default withNavigation(connect(mapStateToProps)(Quiz_Android));\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text, StyleSheet, ScrollView, Dimensions } from 'react-native';\r\nimport TextButton from './TextButton';\r\nimport TouchButton from './TouchButton';\r\nimport { gray, green, red, textGray, darkGray, white } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { withNavigation } from 'react-navigation';\r\n\r\nconst screen = {\r\n  QUESTION: 'question',\r\n  ANSWER: 'answer',\r\n  RESULT: 'result'\r\n};\r\nconst answer = {\r\n  CORRECT: 'correct',\r\n  INCORRECT: 'incorrect'\r\n};\r\nconst SCREEN_WIDTH = Dimensions.get('window').width;\r\n\r\nclass Quiz_iOS extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    deck: PropTypes.object.isRequired\r\n  };\r\n  state = {\r\n    show: screen.QUESTION,\r\n    correct: 0,\r\n    incorrect: 0,\r\n    questionCount: this.props.deck.questions.length,\r\n    answered: Array(this.props.deck.questions.length).fill(0)\r\n  };\r\n  handleScroll = () => {\r\n    this.setState({\r\n      show: screen.QUESTION\r\n    });\r\n  };\r\n  handleAnswer = (response, page) => {\r\n    if (response === answer.CORRECT) {\r\n      this.setState(prevState => ({ correct: prevState.correct + 1 }));\r\n    } else {\r\n      this.setState(prevState => ({ incorrect: prevState.incorrect + 1 }));\r\n    }\r\n    this.setState(\r\n      prevState => ({\r\n        answered: prevState.answered.map((val, idx) => (page === idx ? 1 : val))\r\n      }),\r\n      () => {\r\n        // console.log('this.state.answered', this.state.answered);\r\n        const { correct, incorrect, questionCount } = this.state;\r\n\r\n        if (questionCount === correct + incorrect) {\r\n          this.setState({ show: screen.RESULT });\r\n        } else {\r\n          // this.viewPager.setPage(this.state.page + 1);\r\n          this.scrollView.scrollTo({ x: (page + 1) * SCREEN_WIDTH });\r\n          // console.log('(page + 1) * SCREEN_WIDTH', (page + 1) * SCREEN_WIDTH);\r\n          this.setState(prevState => ({\r\n            show: screen.QUESTION\r\n          }));\r\n        }\r\n      }\r\n    );\r\n  };\r\n  handleReset = () => {\r\n    this.setState(prevState => ({\r\n      show: screen.QUESTION,\r\n      correct: 0,\r\n      incorrect: 0,\r\n      answered: Array(prevState.questionCount).fill(0)\r\n    }));\r\n  };\r\n  render() {\r\n    const { questions } = this.props.deck;\r\n    const { show } = this.state;\r\n\r\n    if (questions.length === 0) {\r\n      return (\r\n        <View style={styles.pageStyle}>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              You cannot take a quiz because there are no cards in the deck.\r\n            </Text>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Please add some cards and try again.\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    if (this.state.show === screen.RESULT) {\r\n      const { correct, questionCount } = this.state;\r\n      const percent = ((correct / questionCount) * 100).toFixed(0);\r\n      const resultStyle =\r\n        percent >= 70 ? styles.resultTextGood : styles.resultTextBad;\r\n\r\n      return (\r\n        <View style={styles.pageStyle}>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Quiz Complete!\r\n            </Text>\r\n            <Text style={resultStyle}>\r\n              {correct} / {questionCount} correct\r\n            </Text>\r\n          </View>\r\n          <View style={styles.block}>\r\n            <Text style={[styles.count, { textAlign: 'center' }]}>\r\n              Percentage correct\r\n            </Text>\r\n            <Text style={resultStyle}>{percent}%</Text>\r\n          </View>\r\n          <View>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: green, borderColor: white }}\r\n              onPress={this.handleReset}\r\n            >\r\n              Restart Quiz\r\n            </TouchButton>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\r\n              txtStyle={{ color: textGray }}\r\n              onPress={() => {\r\n                this.handleReset();\r\n                this.props.navigation.goBack();\r\n              }}\r\n            >\r\n              Back To Deck\r\n            </TouchButton>\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\r\n              txtStyle={{ color: textGray }}\r\n              onPress={() => {\r\n                this.handleReset();\r\n                this.props.navigation.navigate('Home');\r\n              }}\r\n            >\r\n              Home\r\n            </TouchButton>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ScrollView\r\n        style={styles.container}\r\n        pagingEnabled={true}\r\n        horizontal={true}\r\n        onMomentumScrollBegin={this.handleScroll}\r\n        ref={scrollView => {\r\n          this.scrollView = scrollView;\r\n        }}\r\n      >\r\n        {questions.map((question, idx) => (\r\n          <View style={styles.pageStyle} key={idx}>\r\n            <View style={styles.block}>\r\n              <Text style={styles.count}>\r\n                {idx + 1} / {questions.length}\r\n              </Text>\r\n            </View>\r\n            <View style={[styles.block, styles.questionContainer]}>\r\n              <Text style={styles.questionText}>\r\n                {show === screen.QUESTION ? 'Question' : 'Answer'}\r\n              </Text>\r\n              <View style={styles.questionWrapper}>\r\n                <Text style={styles.title}>\r\n                  {show === screen.QUESTION\r\n                    ? question.question\r\n                    : question.answer}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            {show === screen.QUESTION ? (\r\n              <TextButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: screen.ANSWER })}\r\n              >\r\n                Show Answer\r\n              </TextButton>\r\n            ) : (\r\n              <TextButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: screen.QUESTION })}\r\n              >\r\n                Show Question\r\n              </TextButton>\r\n            )}\r\n            <View>\r\n              <TouchButton\r\n                btnStyle={{ backgroundColor: green, borderColor: white }}\r\n                onPress={() => this.handleAnswer(answer.CORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}\r\n              >\r\n                Correct\r\n              </TouchButton>\r\n              <TouchButton\r\n                btnStyle={{ backgroundColor: red, borderColor: white }}\r\n                onPress={() => this.handleAnswer(answer.INCORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}\r\n              >\r\n                Incorrect\r\n              </TouchButton>\r\n            </View>\r\n          </View>\r\n        ))}\r\n      </ScrollView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  pageStyle: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray,\r\n    justifyContent: 'space-around',\r\n    width: SCREEN_WIDTH\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n  count: {\r\n    fontSize: 24\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    textAlign: 'center'\r\n  },\r\n  questionContainer: {\r\n    borderWidth: 1,\r\n    borderColor: darkGray,\r\n    backgroundColor: white,\r\n    borderRadius: 5,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    flexGrow: 1\r\n  },\r\n  questionWrapper: {\r\n    flex: 1,\r\n    justifyContent: 'center'\r\n  },\r\n  questionText: {\r\n    textDecorationLine: 'underline',\r\n    textAlign: 'center',\r\n    fontSize: 20\r\n  },\r\n  resultTextGood: {\r\n    color: green,\r\n    fontSize: 46,\r\n    textAlign: 'center'\r\n  },\r\n  resultTextBad: {\r\n    color: red,\r\n    fontSize: 46,\r\n    textAlign: 'center'\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state, { title }) => {\r\n  const deck = state[title];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default withNavigation(connect(mapStateToProps)(Quiz_iOS));\r\n","import React from 'react';\r\nimport { AsyncStorage } from 'react-native';\r\nimport { Notifications } from 'expo';\r\n\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nconst NOTIFICATION_KEY = 'MobileFlashcard:notifications';\r\nconst CHANNEL_ID = 'DailyReminder';\r\n\r\nexport function clearLocalNotification() {\r\n  return AsyncStorage.removeItem(NOTIFICATION_KEY).then(\r\n    Notifications.cancelAllScheduledNotificationsAsync\r\n  );\r\n}\r\n\r\nfunction createNotification() {\r\n  return {\r\n    title: 'Mobile Flashcards Reminder',\r\n    body: \"👋 Don't forget to study for today!\",\r\n    ios: {\r\n      sound: true\r\n    },\r\n    android: {\r\n      channelId: CHANNEL_ID,\r\n      sticky: false,\r\n      color: 'red'\r\n    }\r\n  };\r\n}\r\n\r\nfunction createChannel() {\r\n  return {\r\n    name: 'Daily Reminder',\r\n    description: 'This is a daily reminder for you to study your flashcards.',\r\n    sound: true,\r\n    priority: 'high'\r\n  };\r\n}\r\n\r\nexport function setLocalNotification() {\r\n  AsyncStorage.getItem(NOTIFICATION_KEY)\r\n    .then(JSON.parse)\r\n    .then(data => {\r\n      // if (true) {\r\n      if (data === null) {\r\n        Permissions.askAsync(Permissions.NOTIFICATIONS).then(({ status }) => {\r\n          // console.log('got in');\r\n          // console.log('data', data);\r\n          if (status === 'granted') {\r\n            // Notifications.presentLocalNotificationAsync(createNotification());\r\n            Notifications.createChannelAndroidAsync(CHANNEL_ID, createChannel())\r\n              .then(val => console.log('channel return:', val))\r\n              .then(() => {\r\n                Notifications.cancelAllScheduledNotificationsAsync();\r\n\r\n                const tomorrow = new Date();\r\n                // 2 minute from now\r\n                // tomorrow.setTime(tomorrow.getTime() + 2 * 60000);\r\n\r\n                tomorrow.setDate(tomorrow.getDate() + 1);\r\n                tomorrow.setHours(20);\r\n                tomorrow.setMinutes(0);\r\n\r\n                Notifications.scheduleLocalNotificationAsync(\r\n                  createNotification(),\r\n                  {\r\n                    time: tomorrow,\r\n                    repeat: 'day'\r\n                  }\r\n                );\r\n\r\n                AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\r\n              })\r\n              .catch(err => {\r\n                console.log('err', err);\r\n              });\r\n          }\r\n        });\r\n      }\r\n    });\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Constants from 'expo-constants';\r\nimport Quiz_Android from './Quiz_Android';\r\nimport Quiz_iOS from './Quiz_iOS';\r\nimport { setLocalNotification, clearLocalNotification } from '../utils/helpers';\r\n\r\nexport class Quiz extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired\r\n  };\r\n  static navigationOptions = ({ navigation }) => {\r\n    const title = navigation.getParam('title', '');\r\n    return {\r\n      title: `${title} Quiz`\r\n    };\r\n  };\r\n  componentDidMount() {\r\n    clearLocalNotification().then(setLocalNotification);\r\n  }\r\n  render() {\r\n    const { navigation } = this.props;\r\n    const title = navigation.getParam('title', '');\r\n\r\n    if (Constants.platform.android) {\r\n      return <Quiz_Android title={title} />;\r\n    }\r\n    return <Quiz_iOS title={title} />;\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, View, StyleSheet } from 'react-native';\r\nimport { gray, white, red, textGray, green } from '../utils/colors';\r\nimport TouchButton from './TouchButton';\r\nimport { resetDecks } from '../utils/api.js';\r\nimport { connect } from 'react-redux';\r\nimport { resetStore } from '../actions/index';\r\n\r\nexport class Settings extends Component {\r\n  static propTypes = {\r\n    navigation: PropTypes.object.isRequired,\r\n    resetStore: PropTypes.func.isRequired\r\n  };\r\n  handleResetDecks = () => {\r\n    const { resetStore, navigation } = this.props;\r\n\r\n    resetStore();\r\n    resetDecks();\r\n    navigation.goBack();\r\n  };\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}> Settings </Text>\r\n        <View style={styles.block}>\r\n          <View style={styles.blockContainer}>\r\n            <Text style={styles.blockText}>\r\n              This will reset the data back to the original data set.\r\n            </Text>\r\n            <View style={{ height: 20 }} />\r\n            <TouchButton\r\n              btnStyle={{ backgroundColor: red, borderColor: white }}\r\n              onPress={this.handleResetDecks}\r\n            >\r\n              Reset Data\r\n            </TouchButton>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray\r\n  },\r\n  title: {\r\n    fontSize: 40,\r\n    textAlign: 'center',\r\n    marginBottom: 16,\r\n    color: green\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n  blockContainer: {\r\n    borderWidth: 1,\r\n    borderColor: '#aaa',\r\n    backgroundColor: white,\r\n    borderRadius: 5,\r\n    paddingTop: 20,\r\n    paddingRight: 20,\r\n    paddingLeft: 20\r\n  },\r\n  blockText: {\r\n    fontSize: 18,\r\n    color: textGray\r\n  }\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  { resetStore }\r\n)(Settings);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Platform } from 'react-native';\r\nimport * as Icon from '@expo/vector-icons';\r\nimport {\r\n  createBottomTabNavigator,\r\n  createStackNavigator\r\n} from 'react-navigation';\r\nimport DeckList from '../components/DeckList';\r\nimport AddDeck from '../components/AddDeck';\r\nimport DeckDetail from '../components/DeckDetail';\r\nimport AddCard from '../components/AddCard';\r\nimport Quiz from '../components/Quiz';\r\nimport Settings from '../components/Settings';\r\n\r\nimport { darkGray, white, green, lightGreen } from '../utils/colors';\r\n\r\nconst isIOS = Platform.OS === 'ios' ? true : false;\r\n\r\nconst routeConfigs = {\r\n  Decks: {\r\n    screen: DeckList,\r\n    navigationOptions: {\r\n      tabBarLabel: 'Decks',\r\n      tabBarIcon: ({ tintColor }) => (\r\n        <Icon.Ionicons\r\n          name={isIOS ? 'ios-bookmarks' : 'md-bookmarks'}\r\n          size={30}\r\n          color={tintColor}\r\n        />\r\n      )\r\n    }\r\n  },\r\n  AddDeck: {\r\n    screen: AddDeck,\r\n    navigationOptions: {\r\n      tabBarLabel: 'Add Deck',\r\n      tabBarIcon: ({ tintColor }) => (\r\n        <Icon.FontAwesome name=\"plus-square\" size={30} color={tintColor} />\r\n      )\r\n    }\r\n  },\r\n  Settings: {\r\n    screen: Settings,\r\n    navigationOptions: {\r\n      tabBarLabel: 'Settings',\r\n      tabBarIcon: ({ tintColor }) => (\r\n        <Icon.FontAwesome name=\"sliders\" size={30} color={tintColor} />\r\n      )\r\n    }\r\n  }\r\n};\r\n\r\nrouteConfigs.Decks.navigationOptions.tabBarIcon.propTypes = {\r\n  tintColor: PropTypes.string.isRequired\r\n};\r\nrouteConfigs.AddDeck.navigationOptions.tabBarIcon.propTypes = {\r\n  tintColor: PropTypes.string.isRequired\r\n};\r\nrouteConfigs.Settings.navigationOptions.tabBarIcon.propTypes = {\r\n  tintColor: PropTypes.string.isRequired\r\n};\r\n\r\nconst tabNavigatorConfig = {\r\n  navigationOptions: {\r\n    header: null\r\n  },\r\n  defaultNavigationOptions: {\r\n    bounces: true\r\n  },\r\n  tabBarOptions: {\r\n    activeTintColor: green,\r\n    style: {\r\n      height: 60,\r\n      backgroundColor: white,\r\n      shadowColor: 'rgba(0,0,0, 0.24)',\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 3\r\n      },\r\n      shadowRadius: 6,\r\n      shadowOpacity: 1,\r\n      borderTopWidth: 1,\r\n      borderTopColor: darkGray\r\n    },\r\n    labelStyle: {\r\n      fontSize: 12,\r\n      fontWeight: 'bold'\r\n    },\r\n    tabStyle: {\r\n      marginTop: 5,\r\n      marginBottom: 3\r\n    },\r\n    showIcon: true\r\n  }\r\n};\r\n\r\nconst Tabs = createBottomTabNavigator(routeConfigs, tabNavigatorConfig);\r\n\r\nconst MainNavigator = createStackNavigator(\r\n  {\r\n    Home: {\r\n      screen: Tabs\r\n    },\r\n    DeckDetail: {\r\n      screen: DeckDetail,\r\n      navigationOptions: {\r\n        headerTintColor: green,\r\n        headerStyle: {\r\n          backgroundColor: lightGreen\r\n        },\r\n        title: 'Deck Details'\r\n      }\r\n    },\r\n    AddCard: {\r\n      screen: AddCard,\r\n      navigationOptions: {\r\n        headerTintColor: green,\r\n        headerStyle: {\r\n          backgroundColor: lightGreen\r\n        },\r\n        headerTitleStyle: {\r\n          justifyContent: 'center',\r\n          textAlign: 'center'\r\n        },\r\n        title: 'Add Card'\r\n      }\r\n    },\r\n    Quiz: {\r\n      screen: Quiz,\r\n      navigationOptions: {\r\n        headerTintColor: green,\r\n        headerStyle: {\r\n          backgroundColor: lightGreen\r\n        }\r\n        // title: 'Quiz'\r\n      }\r\n    }\r\n  },\r\n  { headerLayoutPreset: 'center' }\r\n);\r\n\r\nexport default MainNavigator;\r\n","import React from 'react';\r\nimport { createAppContainer } from 'react-navigation';\r\nimport MainTabNavigator from './MainTabNavigator';\r\n\r\nexport default createAppContainer(MainTabNavigator);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { StyleSheet, View, StatusBar } from 'react-native';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers/index';\r\nimport Constants from 'expo-constants';\r\nimport AppNavigator from './navigation/AppNavigator';\r\nimport { setLocalNotification } from './utils/helpers';\r\n\r\nconst store = createStore(\r\n  reducer /* preloadedState, */,\r\n  applyMiddleware(thunk, logger)\r\n);\r\n\r\nfunction FlashcardStatusBar({ backgroundColor, ...props }) {\r\n  return (\r\n    <View style={{ backgroundColor, height: Constants.statusBarHeight }}>\r\n      <StatusBar translucent backgroundColor={backgroundColor} {...props} />\r\n    </View>\r\n  );\r\n}\r\nFlashcardStatusBar.propTypes = {\r\n  backgroundColor: PropTypes.string.isRequired\r\n};\r\n\r\nexport default class App extends React.Component {\r\n  componentDidMount() {\r\n    setLocalNotification();\r\n  }\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <View style={styles.container}>\r\n          <FlashcardStatusBar\r\n            backgroundColor=\"green\"\r\n            barStyle=\"light-content\"\r\n          />\r\n          <AppNavigator />\r\n        </View>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#dde'\r\n  }\r\n});\r\n","import {\r\n  RECEIVE_DECKS,\r\n  ADD_DECK,\r\n  REMOVE_DECK,\r\n  ADD_CARD,\r\n  RESET_STORE\r\n} from '../actions/index';\r\nimport { decks as INITIAL_STATE } from '../utils/_DATA';\r\n\r\nexport default function decks(state = {}, action) {\r\n  switch (action.type) {\r\n    case RECEIVE_DECKS:\r\n      return {\r\n        ...state,\r\n        ...action.decks\r\n      };\r\n    case ADD_DECK:\r\n      const { title } = action;\r\n      return {\r\n        ...state,\r\n        [title]: {\r\n          title,\r\n          questions: []\r\n        }\r\n      };\r\n    case REMOVE_DECK:\r\n      const { id } = action;\r\n      // return ({ [id]: value, ...remainingDecks } = state);\r\n      const { [id]: value, ...remainingDecks } = state;\r\n      // console.log(remainingDecks);\r\n      return remainingDecks;\r\n    case ADD_CARD:\r\n      const { deckId, card } = action;\r\n      return {\r\n        ...state,\r\n        [deckId]: {\r\n          ...state[deckId],\r\n          questions: [...state[deckId].questions].concat(card)\r\n        }\r\n      };\r\n    case RESET_STORE:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/mobile-flashcards/expo-service-worker.js', { scope: '/mobile-flashcards/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}